# Nombre del flujo de trabajo
name: Continuous Integration

# Desencadenantes del flujo de trabajo:
on:

  # 'Push' en la rama 'master':
  push:
    branches: [ "master" ]

  # 'Pull Request' en la rama 'master':
  pull_request:
    branches: [ "master" ]

  # Ejecución manual
  workflow_dispatch:

# Se da permisos de escritura en todos los ámbitos al flujo de trabajo 
permissions: write-all

# Trabajos del flujo de trabajo (en este caso solo hay uno)
jobs:

  # Se crea un entorno con una máquina virtual de Linux
  build:
    runs-on: ubuntu-latest
    
    # Pasos del trabajo
    steps:
      # 1er paso: acción que verifica el repositorio en para que el flujo de trabajo pueda acceder a él:
      - uses: actions/checkout@v4
      
      # 2do paso: acción para usar funciones de la librería CML en el flujo de trabajo:
      - uses: iterative/setup-cml@v2
      
      # 3er paso (Instalar librerías): se actualiza 'pip' y se instalan las librerías del 'requirements.txt':
      - name: Instalar librerías
        run: pip install --upgrade pip && pip install -r requirements.txt
        
      # 4to paso (Formateo): Con 'black' se identifican errores y se formatea el código de Python:
      - name: Formateo
        run: black *.py
        
      # 5to paso (Entrenamiento): Se ejecuta el código de entrenamiento 'train.py':
      - name: Entrenamiento
        run: python train.py
        
      # 6to paso (Evaluación): Se escribe el informe con métricas y matriz de confusión, mostrándose como un comentario:
      - name: Evaluación
        # Variable de entorno: REPO_TOKEN tiene como valor el token que se crea automáticamente para el flujo de trabajo
        env:
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Con el comando pipe (|) se encadenan todos los comandos
        run: |
          # La frase "## Model Metrics" se escribe en 'report.md'
          echo "## Model Metrics" > report.md
          
          # Las métricas de 'accuracy' y 'F1-Score' se escriben en 'report.md'
          cat ./Results/metrics.txt >> report.md
          
          # La frase "## Confusion Matrix Plot" se escribe en 'report.md'
          echo '\n## Confusion Matrix Plot' >> report.md
          
          # La matriz de confusión se escribe en 'report.md'
          echo '![Confusion Matrix](./Results/model_results.png)' >> report.md

          # Devuelve un informe CML como un comentario en el flujo de trabajo
          cml comment create report.md
      
      # 7to paso (Actualiza rama): Actualiza la rama 'update' de GitHub con nuevos modelos, métricas y matriz de confusión
      - name: Actualiza rama
        # Como variables de entorno se usa el nombre y el mail configurados como secretos en la config. del repositorio
        env:
          NAME: ${{ secrets.USER_NAME }}
          EMAIL: ${{ secrets.USER_EMAIL }}
        # Con el comando pipe (|) se encadenan todos los comandos
        run: |
          # Se configura como nombre de la cuenta de 'Git' la configurada como secreto en el repositorio
          git config --global user.name $NAME
          
          # Se configura como mail de la cuenta de 'Git' la configurada como secreto en el repositorio
          git config --global user.email $EMAIL

          # Se hace un 'commit' añadiendo automáticamente los cambios de todos los archivos trackeados
          git commit -am "Actualizado con nuevos resultados"

          # Se hace un 'push' forzado' al repositorio remoto en la rama 'update'
          git push --force origin HEAD:update